(()=>{"use strict";var n={363:(n,e,t)=>{t.d(e,{Z:()=>A});var r=t(15),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([n.id,".categories {\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n    max-width: 90%;\n    margin: 0 auto;\n    overflow: auto;\n    align-items: center;\n    font: 300 1em 'Fira Sans', sans-serif;\n}\n\n.category__item {\n    background: #02394A;\n    font: inherit;\n    line-height: 1;\n    margin: 0.5em;\n    padding: 1em 2em;\n    color: white;\n    transition: 0.25s;\n    cursor: pointer;\n    box-shadow: rgba(0, 0, 0, 0.12) 0px 1px 3px, rgba(0, 0, 0, 0.24) 0px 1px 2px;\n}\n\n.category__item:hover,\n.category__item:focus {\n    border-color: #F26DF9;\n    color: #F26DF9;\n    box-shadow: 0 0.5em 0.5em -0.4em #F26DF9;\n    transform: translateY(-0.25em);\n}\n\n.category__item:active {\n    transform: translateY(5px) scale(0.98);\n}\n\n.category__item-name {\n    font-weight: 400;\n    white-space: nowrap;\n}","",{version:3,sources:["webpack://./src/components/view/categories/categories.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,uBAAuB;IACvB,eAAe;IACf,cAAc;IACd,cAAc;IACd,cAAc;IACd,mBAAmB;IACnB,qCAAqC;AACzC;;AAEA;IACI,mBAAmB;IACnB,aAAa;IACb,cAAc;IACd,aAAa;IACb,gBAAgB;IAChB,YAAY;IACZ,iBAAiB;IACjB,eAAe;IACf,4EAA4E;AAChF;;AAEA;;IAEI,qBAAqB;IACrB,cAAc;IACd,wCAAwC;IACxC,8BAA8B;AAClC;;AAEA;IACI,sCAAsC;AAC1C;;AAEA;IACI,gBAAgB;IAChB,mBAAmB;AACvB",sourcesContent:[".categories {\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n    max-width: 90%;\n    margin: 0 auto;\n    overflow: auto;\n    align-items: center;\n    font: 300 1em 'Fira Sans', sans-serif;\n}\n\n.category__item {\n    background: #02394A;\n    font: inherit;\n    line-height: 1;\n    margin: 0.5em;\n    padding: 1em 2em;\n    color: white;\n    transition: 0.25s;\n    cursor: pointer;\n    box-shadow: rgba(0, 0, 0, 0.12) 0px 1px 3px, rgba(0, 0, 0, 0.24) 0px 1px 2px;\n}\n\n.category__item:hover,\n.category__item:focus {\n    border-color: #F26DF9;\n    color: #F26DF9;\n    box-shadow: 0 0.5em 0.5em -0.4em #F26DF9;\n    transform: translateY(-0.25em);\n}\n\n.category__item:active {\n    transform: translateY(5px) scale(0.98);\n}\n\n.category__item-name {\n    font-weight: 400;\n    white-space: nowrap;\n}"],sourceRoot:""}]);const A=a},669:(n,e,t)=>{t.d(e,{Z:()=>A});var r=t(15),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([n.id,".news {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    column-gap: 1.5vw;\n    padding: 0 3vw;\n}\n\n\n.news__item {\n    display: flex;\n    flex-direction: column;\n    margin: 2.5vh auto;\n    margin-bottom: 1.6%;\n    background: #fff;\n    color: #333;\n    line-height: 1.4;\n    font-family: Arial, sans-serif;\n    border-radius: 5px;\n    overflow: hidden;\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\n}\n\n.news__item:hover .news__meta-photo {\n    transform: scale(1.3) rotate(3deg);\n}\n\n.news__item .news__meta {\n    position: relative;\n    height: 200px;\n}\n\n.news__item .news__meta-photo {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-size: cover;\n    background-position: center;\n    transition: transform 0.2s;\n}\n\n.news__item .news__meta-details,\n.news__item .news__meta-details ul {\n    margin: auto;\n    padding: 0;\n    list-style: none;\n}\n\n.news__item .news__meta-details {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: -120%;\n    margin: auto;\n    transition: left 0.2s;\n    background: rgba(0, 0, 0, 0.6);\n    color: #fff;\n    padding: 10px;\n    width: 100%;\n    font-size: 0.9rem;\n}\n\n.news__item .news__description {\n    padding: 1rem;\n    background: #fff;\n    position: relative;\n    z-index: 1;\n}\n\n.news__item .news__description h2 {\n    line-height: 1;\n    margin: 0;\n    font-size: 1.7rem;\n}\n\n.news__item .news__description h3 {\n    font-size: 1rem;\n    font-weight: 300;\n    text-transform: uppercase;\n    color: #a2a2a2;\n    margin-top: 5px;\n}\n\n.news__item .news__description .news__read-more {\n    text-align: right;\n}\n\n.news__item .news__description .news__read-more a {\n    color: #5ad67d;\n    display: inline-block;\n    position: relative;\n    text-decoration: none;\n    font-weight: 800;\n}\n\n.news__item .news__description .news__read-more a:after {\n    content: '→';\n    margin-left: -10px;\n    opacity: 0;\n    vertical-align: middle;\n    transition: margin 0.3s, opacity 0.3s;\n}\n\n.news__item .news__description .news__read-more a:hover:after {\n    margin-left: 5px;\n    opacity: 1;\n}\n\n.news__item p {\n    margin: 1rem 0 0;\n}\n\n.news__item p:first-of-type {\n    margin-top: 1.25rem;\n    position: relative;\n}\n\n.news__item p:first-of-type:before {\n    content: '';\n    position: absolute;\n    height: 5px;\n    background: #5ad67d;\n    width: 35px;\n    top: -0.75rem;\n    border-radius: 3px;\n}\n\n.news__item:hover .news__meta-details {\n    left: 0%;\n}\n\n@media (max-width: 840px) {\n    .news {\n        grid-template-columns: repeat(1, 1fr);\n    }\n}\n\n@media (min-width: 640px) {\n    .news__item {\n        flex-direction: row;\n        max-width: 700px;\n    }\n\n    .news__item .news__meta {\n        flex-basis: 40%;\n        height: auto;\n    }\n\n    .news__item .news__description {\n        flex-basis: 60%;\n    }\n\n    .news__item .news__description:before {\n        -webkit-transform: skewX(-3deg);\n        transform: skewX(-3deg);\n        content: '';\n        background: #fff;\n        width: 30px;\n        position: absolute;\n        left: -10px;\n        top: 0;\n        bottom: 0;\n        z-index: -1;\n    }\n\n    .news__item.alt {\n        flex-direction: row-reverse;\n    }\n\n    .news__item.alt .news__description:before {\n        left: inherit;\n        right: -10px;\n        -webkit-transform: skew(3deg);\n        transform: skew(3deg);\n    }\n\n    .news__item.alt .news__meta-details {\n        padding-left: 25px;\n    }\n}\n","",{version:3,sources:["webpack://./src/components/view/news/news.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,qCAAqC;IACrC,iBAAiB;IACjB,cAAc;AAClB;;;AAGA;IACI,aAAa;IACb,sBAAsB;IACtB,kBAAkB;IAClB,mBAAmB;IACnB,gBAAgB;IAChB,WAAW;IACX,gBAAgB;IAChB,8BAA8B;IAC9B,kBAAkB;IAClB,gBAAgB;IAChB,yFAAyF;AAC7F;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,kBAAkB;IAClB,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,QAAQ;IACR,SAAS;IACT,OAAO;IACP,sBAAsB;IACtB,2BAA2B;IAC3B,0BAA0B;AAC9B;;AAEA;;IAEI,YAAY;IACZ,UAAU;IACV,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,SAAS;IACT,WAAW;IACX,YAAY;IACZ,qBAAqB;IACrB,8BAA8B;IAC9B,WAAW;IACX,aAAa;IACb,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,gBAAgB;IAChB,kBAAkB;IAClB,UAAU;AACd;;AAEA;IACI,cAAc;IACd,SAAS;IACT,iBAAiB;AACrB;;AAEA;IACI,eAAe;IACf,gBAAgB;IAChB,yBAAyB;IACzB,cAAc;IACd,eAAe;AACnB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,cAAc;IACd,qBAAqB;IACrB,kBAAkB;IAClB,qBAAqB;IACrB,gBAAgB;AACpB;;AAEA;IACI,YAAY;IACZ,kBAAkB;IAClB,UAAU;IACV,sBAAsB;IACtB,qCAAqC;AACzC;;AAEA;IACI,gBAAgB;IAChB,UAAU;AACd;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,WAAW;IACX,mBAAmB;IACnB,WAAW;IACX,aAAa;IACb,kBAAkB;AACtB;;AAEA;IACI,QAAQ;AACZ;;AAEA;IACI;QACI,qCAAqC;IACzC;AACJ;;AAEA;IACI;QACI,mBAAmB;QACnB,gBAAgB;IACpB;;IAEA;QACI,eAAe;QACf,YAAY;IAChB;;IAEA;QACI,eAAe;IACnB;;IAEA;QACI,+BAA+B;QAC/B,uBAAuB;QACvB,WAAW;QACX,gBAAgB;QAChB,WAAW;QACX,kBAAkB;QAClB,WAAW;QACX,MAAM;QACN,SAAS;QACT,WAAW;IACf;;IAEA;QACI,2BAA2B;IAC/B;;IAEA;QACI,aAAa;QACb,YAAY;QACZ,6BAA6B;QAC7B,qBAAqB;IACzB;;IAEA;QACI,kBAAkB;IACtB;AACJ",sourcesContent:[".news {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    column-gap: 1.5vw;\n    padding: 0 3vw;\n}\n\n\n.news__item {\n    display: flex;\n    flex-direction: column;\n    margin: 2.5vh auto;\n    margin-bottom: 1.6%;\n    background: #fff;\n    color: #333;\n    line-height: 1.4;\n    font-family: Arial, sans-serif;\n    border-radius: 5px;\n    overflow: hidden;\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\n}\n\n.news__item:hover .news__meta-photo {\n    transform: scale(1.3) rotate(3deg);\n}\n\n.news__item .news__meta {\n    position: relative;\n    height: 200px;\n}\n\n.news__item .news__meta-photo {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-size: cover;\n    background-position: center;\n    transition: transform 0.2s;\n}\n\n.news__item .news__meta-details,\n.news__item .news__meta-details ul {\n    margin: auto;\n    padding: 0;\n    list-style: none;\n}\n\n.news__item .news__meta-details {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: -120%;\n    margin: auto;\n    transition: left 0.2s;\n    background: rgba(0, 0, 0, 0.6);\n    color: #fff;\n    padding: 10px;\n    width: 100%;\n    font-size: 0.9rem;\n}\n\n.news__item .news__description {\n    padding: 1rem;\n    background: #fff;\n    position: relative;\n    z-index: 1;\n}\n\n.news__item .news__description h2 {\n    line-height: 1;\n    margin: 0;\n    font-size: 1.7rem;\n}\n\n.news__item .news__description h3 {\n    font-size: 1rem;\n    font-weight: 300;\n    text-transform: uppercase;\n    color: #a2a2a2;\n    margin-top: 5px;\n}\n\n.news__item .news__description .news__read-more {\n    text-align: right;\n}\n\n.news__item .news__description .news__read-more a {\n    color: #5ad67d;\n    display: inline-block;\n    position: relative;\n    text-decoration: none;\n    font-weight: 800;\n}\n\n.news__item .news__description .news__read-more a:after {\n    content: '→';\n    margin-left: -10px;\n    opacity: 0;\n    vertical-align: middle;\n    transition: margin 0.3s, opacity 0.3s;\n}\n\n.news__item .news__description .news__read-more a:hover:after {\n    margin-left: 5px;\n    opacity: 1;\n}\n\n.news__item p {\n    margin: 1rem 0 0;\n}\n\n.news__item p:first-of-type {\n    margin-top: 1.25rem;\n    position: relative;\n}\n\n.news__item p:first-of-type:before {\n    content: '';\n    position: absolute;\n    height: 5px;\n    background: #5ad67d;\n    width: 35px;\n    top: -0.75rem;\n    border-radius: 3px;\n}\n\n.news__item:hover .news__meta-details {\n    left: 0%;\n}\n\n@media (max-width: 840px) {\n    .news {\n        grid-template-columns: repeat(1, 1fr);\n    }\n}\n\n@media (min-width: 640px) {\n    .news__item {\n        flex-direction: row;\n        max-width: 700px;\n    }\n\n    .news__item .news__meta {\n        flex-basis: 40%;\n        height: auto;\n    }\n\n    .news__item .news__description {\n        flex-basis: 60%;\n    }\n\n    .news__item .news__description:before {\n        -webkit-transform: skewX(-3deg);\n        transform: skewX(-3deg);\n        content: '';\n        background: #fff;\n        width: 30px;\n        position: absolute;\n        left: -10px;\n        top: 0;\n        bottom: 0;\n        z-index: -1;\n    }\n\n    .news__item.alt {\n        flex-direction: row-reverse;\n    }\n\n    .news__item.alt .news__description:before {\n        left: inherit;\n        right: -10px;\n        -webkit-transform: skew(3deg);\n        transform: skew(3deg);\n    }\n\n    .news__item.alt .news__meta-details {\n        padding-left: 25px;\n    }\n}\n"],sourceRoot:""}]);const A=a},501:(n,e,t)=>{t.d(e,{Z:()=>A});var r=t(15),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([n.id,".sources {\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n    max-width: 90%;\n    margin: 0 auto;\n    max-height: 200px;\n    overflow: auto;\n    align-items: flex-start;\n    font: 300 1em 'Fira Sans', sans-serif;\n}\n\n.source__item {\n    background: none;\n    border: 2px solid #5158bb;\n    font: inherit;\n    line-height: 1;\n    margin: 0.3em;\n    padding: 0.5em 1em;\n    color: #5158bb;\n    transition: 0.25s;\n    cursor: pointer;\n    box-shadow: rgba(0, 0, 0, 0.12) 0px 1px 3px, rgba(0, 0, 0, 0.24) 0px 1px 2px;\n}\n\n.source__item:hover,\n.source__item:focus {\n    border-color: #eb4b98;\n    color: #eb4b98;\n    box-shadow: 0 0.5em 0.5em -0.4em #eb4b98;\n    transform: translateY(-0.25em);\n}\n\n.source__item:active {\n    transform: translateY(5px) scale(0.98);\n}\n\n.source__item-name {\n    font-weight: 400;\n    white-space: nowrap;\n}\n","",{version:3,sources:["webpack://./src/components/view/sources/sources.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,uBAAuB;IACvB,eAAe;IACf,cAAc;IACd,cAAc;IACd,iBAAiB;IACjB,cAAc;IACd,uBAAuB;IACvB,qCAAqC;AACzC;;AAEA;IACI,gBAAgB;IAChB,yBAAyB;IACzB,aAAa;IACb,cAAc;IACd,aAAa;IACb,kBAAkB;IAClB,cAAc;IACd,iBAAiB;IACjB,eAAe;IACf,4EAA4E;AAChF;;AAEA;;IAEI,qBAAqB;IACrB,cAAc;IACd,wCAAwC;IACxC,8BAA8B;AAClC;;AAEA;IACI,sCAAsC;AAC1C;;AAEA;IACI,gBAAgB;IAChB,mBAAmB;AACvB",sourcesContent:[".sources {\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n    max-width: 90%;\n    margin: 0 auto;\n    max-height: 200px;\n    overflow: auto;\n    align-items: flex-start;\n    font: 300 1em 'Fira Sans', sans-serif;\n}\n\n.source__item {\n    background: none;\n    border: 2px solid #5158bb;\n    font: inherit;\n    line-height: 1;\n    margin: 0.3em;\n    padding: 0.5em 1em;\n    color: #5158bb;\n    transition: 0.25s;\n    cursor: pointer;\n    box-shadow: rgba(0, 0, 0, 0.12) 0px 1px 3px, rgba(0, 0, 0, 0.24) 0px 1px 2px;\n}\n\n.source__item:hover,\n.source__item:focus {\n    border-color: #eb4b98;\n    color: #eb4b98;\n    box-shadow: 0 0.5em 0.5em -0.4em #eb4b98;\n    transform: translateY(-0.25em);\n}\n\n.source__item:active {\n    transform: translateY(5px) scale(0.98);\n}\n\n.source__item-name {\n    font-weight: 400;\n    white-space: nowrap;\n}\n"],sourceRoot:""}]);const A=a},767:(n,e,t)=>{t.d(e,{Z:()=>A});var r=t(15),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([n.id,"body {\r\n    color: #043565;\r\n    font-family: sans-serif;\r\n}\r\n\r\nheader {\r\n    max-width: 90%;\r\n    margin: 0 auto;\r\n}\r\n\r\nheader h1 {\r\n    font-size: 4rem;\r\n    font-weight: 800;\r\n    margin: 0.5em 0;\r\n    \r\n}\r\n\r\nfooter {\r\n    max-width: 90%;\r\n    height: 100px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    gap: 5px;\r\n    flex-wrap: wrap;\r\n    margin: 5vh auto;\r\n}\r\n\r\nfooter .copyright {\r\n    font-size: 14px;\r\n    color: #043565;\r\n    text-align: center;\r\n    width: 100%;\r\n}\r\n\r\nfooter .copyright:before {\r\n    content: '©';\r\n}\r\n\r\n.footer a,\r\n.footer span {\r\n    display: block;\r\n    padding: 10px;\r\n    color: var(--green-color);\r\n}\r\n\r\n@media (max-width: 640px) {\r\n    header h1 {\r\n        font-size: 3rem;\r\n        margin: 0.2em 0;\r\n    }\r\n}","",{version:3,sources:["webpack://./src/global.css"],names:[],mappings:"AAAA;IACI,cAAc;IACd,uBAAuB;AAC3B;;AAEA;IACI,cAAc;IACd,cAAc;AAClB;;AAEA;IACI,eAAe;IACf,gBAAgB;IAChB,eAAe;;AAEnB;;AAEA;IACI,cAAc;IACd,aAAa;IACb,aAAa;IACb,mBAAmB;IACnB,8BAA8B;IAC9B,QAAQ;IACR,eAAe;IACf,gBAAgB;AACpB;;AAEA;IACI,eAAe;IACf,cAAc;IACd,kBAAkB;IAClB,WAAW;AACf;;AAEA;IACI,YAAY;AAChB;;AAEA;;IAEI,cAAc;IACd,aAAa;IACb,yBAAyB;AAC7B;;AAEA;IACI;QACI,eAAe;QACf,eAAe;IACnB;AACJ",sourcesContent:["body {\r\n    color: #043565;\r\n    font-family: sans-serif;\r\n}\r\n\r\nheader {\r\n    max-width: 90%;\r\n    margin: 0 auto;\r\n}\r\n\r\nheader h1 {\r\n    font-size: 4rem;\r\n    font-weight: 800;\r\n    margin: 0.5em 0;\r\n    \r\n}\r\n\r\nfooter {\r\n    max-width: 90%;\r\n    height: 100px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    gap: 5px;\r\n    flex-wrap: wrap;\r\n    margin: 5vh auto;\r\n}\r\n\r\nfooter .copyright {\r\n    font-size: 14px;\r\n    color: #043565;\r\n    text-align: center;\r\n    width: 100%;\r\n}\r\n\r\nfooter .copyright:before {\r\n    content: '©';\r\n}\r\n\r\n.footer a,\r\n.footer span {\r\n    display: block;\r\n    padding: 10px;\r\n    color: var(--green-color);\r\n}\r\n\r\n@media (max-width: 640px) {\r\n    header h1 {\r\n        font-size: 3rem;\r\n        margin: 0.2em 0;\r\n    }\r\n}"],sourceRoot:""}]);const A=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var A=0;A<n.length;A++){var s=[].concat(n[A]);r&&o[s[0]]||(t&&(s[2]?s[2]="".concat(t," and ").concat(s[2]):s[2]=t),e.push(s))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}n.exports=function(n){var t,r,o=(r=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){var t=n&&("undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"]);if(null!=t){var r,o,i=[],a=!0,A=!1;try{for(t=t.call(n);!(a=(r=t.next()).done)&&(i.push(r.value),!e||i.length!==e);a=!0);}catch(n){A=!0,o=n}finally{try{a||null==t.return||t.return()}finally{if(A)throw o}}return i}}(t,r)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(n,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if(!a)return i;if("function"==typeof btoa){var A=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(A),c="/*# ".concat(s," */"),l=a.sources.map((function(n){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(n," */")}));return[i].concat(l).concat([c]).join("\n")}return[i].join("\n")}},379:(n,e,t)=>{var r,o=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),i=[];function a(n){for(var e=-1,t=0;t<i.length;t++)if(i[t].identifier===n){e=t;break}return e}function A(n,e){for(var t={},r=[],o=0;o<n.length;o++){var A=n[o],s=e.base?A[0]+e.base:A[0],c=t[s]||0,l="".concat(s," ").concat(c);t[s]=c+1;var p=a(l),u={css:A[1],media:A[2],sourceMap:A[3]};-1!==p?(i[p].references++,i[p].updater(u)):i.push({identifier:l,updater:f(u,e),references:1}),r.push(l)}return r}function s(n){var e=document.createElement("style"),r=n.attributes||{};if(void 0===r.nonce){var i=t.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(n){e.setAttribute(n,r[n])})),"function"==typeof n.insert)n.insert(e);else{var a=o(n.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var c,l=(c=[],function(n,e){return c[n]=e,c.filter(Boolean).join("\n")});function p(n,e,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(n.styleSheet)n.styleSheet.cssText=l(e,o);else{var i=document.createTextNode(o),a=n.childNodes;a[e]&&n.removeChild(a[e]),a.length?n.insertBefore(i,a[e]):n.appendChild(i)}}function u(n,e,t){var r=t.css,o=t.media,i=t.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}var d=null,m=0;function f(n,e){var t,r,o;if(e.singleton){var i=m++;t=d||(d=s(e)),r=p.bind(null,t,i,!1),o=p.bind(null,t,i,!0)}else t=s(e),r=u.bind(null,t,e),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else o()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=A(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var r=0;r<t.length;r++){var o=a(t[r]);i[o].references--}for(var s=A(n,e),c=0;c<t.length;c++){var l=a(t[c]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}t=s}}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n,e=function(){return e=Object.assign||function(n){for(var e,t=1,r=arguments.length;t<r;t++)for(var o in e=arguments[t])Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n},e.apply(this,arguments)};!function(n){n[n.Unauthorized=401]="Unauthorized",n[n.NotFound=404]="NotFound"}(n||(n={}));var r,o=function(){function t(n,e){this.baseLink=n,this.options=e}return t.prototype.getResp=function(n,e){var t=n.endpoint,r=n.options,o=void 0===r?{}:r;void 0===e&&(e=function(){console.error("No callback for GET response")}),this.load("GET",t,e,o)},t.prototype.errorHandler=function(e){if(!e.ok)throw e.status!==n.Unauthorized&&e.status!==n.NotFound||console.log("Sorry, but there is ".concat(e.status," error: ").concat(e.statusText)),Error(e.statusText);return e},t.prototype.makeUrl=function(n,t){var r=e(e({},this.options),n),o="".concat(this.baseLink).concat(t,"?");return Object.keys(r).forEach((function(n){o+="".concat(n,"=").concat(r[n],"&")})),o.slice(0,-1)},t.prototype.load=function(n,e,t,r){void 0===r&&(r={}),fetch(this.makeUrl(r,e),{method:n}).then(this.errorHandler).then((function(n){return n.json()})).then((function(n){return t(n)})).catch((function(n){return console.error(n)}))},t}(),i=(r=function(n,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,e){n.__proto__=e}||function(n,e){for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t])},r(n,e)},function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function t(){this.constructor=n}r(n,e),n.prototype=null===e?Object.create(e):(t.prototype=e.prototype,new t)});const a=function(n){function e(){return n.call(this,"https://newsapi.org/v2/",{apiKey:"ef036ee10a5645c199baa05845f563ec"})||this}return i(e,n),e}(o);var A=t(379),s=t.n(A),c=t(669);s()(c.Z,{insert:"head",singleton:!1}),c.Z.locals;var l=function(){function n(){}return n.prototype.draw=function(n){var e=n.length>=10?n.filter((function(n,e){return e<10})):n,t=document.createDocumentFragment(),r=document.querySelector("#newsItemTemp");e.forEach((function(n,e){var o=r.content.cloneNode(!0),i=o.querySelector(".news__item");e%2&&i.classList.add("alt"),o.querySelector(".news__meta-photo").style.backgroundImage="url(".concat(n.urlToImage||"img/news_placeholder.jpg",")"),o.querySelector(".news__meta-author").textContent=n.author||n.source.name,o.querySelector(".news__meta-date").textContent=n.publishedAt.slice(0,10).split("-").reverse().join("-"),o.querySelector(".news__description-title").textContent=n.title,o.querySelector(".news__description-source").textContent=n.source.name,o.querySelector(".news__description-content").textContent=n.description,o.querySelector(".news__read-more a").setAttribute("href",n.url),t.append(o)}));var o=document.querySelector(".news");o.innerHTML="",o.appendChild(t)},n}();const p=l;var u=t(501);s()(u.Z,{insert:"head",singleton:!1}),u.Z.locals;const d=function(){function n(){}return n.prototype.draw=function(n){var e=document.createDocumentFragment(),t=document.querySelector("#sourceItemTemp");n.forEach((function(n){if(null!=t){var r=t.content.cloneNode(!0);null!=r&&(r.querySelector(".source__item-name").textContent=n.name,r.querySelector(".source__item").setAttribute("data-source-id",n.id),e.append(r),document.querySelector(".sources").append(e))}}))},n}();var m=t(363);s()(m.Z,{insert:"head",singleton:!1}),m.Z.locals;const f=function(){function n(){}return n.prototype.draw=function(){var n=document.createDocumentFragment(),e=document.querySelector("#categoryItemTemp");["all","business","entertainment","general","health","science","sports","technology"].forEach((function(t){if(null!=e){var r=e.content.cloneNode(!0);null!=r&&(r.querySelector(".category__item-name").textContent=t,r.querySelector(".category__item").setAttribute("data-category",t),n.append(r),document.querySelector(".categories").append(n))}}))},n}();var g=function(){function n(){this.news=new p,this.sources=new d,this.categories=new f}return n.prototype.drawNews=function(n){var e=(null==n?void 0:n.articles)?null==n?void 0:n.articles:[];this.news.draw(e)},n.prototype.drawSources=function(n){var e=(null==n?void 0:n.sources)?null==n?void 0:n.sources:[];this.sources.draw(e)},n.prototype.drawCategories=function(){this.categories.draw()},n}(),_=function(){var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,e){n.__proto__=e}||function(n,e){for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t])},n(e,t)};return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}}();const C=function(n){function e(){var e=n.call(this)||this;return e.view=new g,e}return _(e,n),e.prototype.getSources=function(e){n.prototype.getResp.call(this,{endpoint:"sources"},e)},e.prototype.getSourcesByCategory=function(e,t){for(var r=e.target,o=e.currentTarget;r!==o;)if(r.classList.contains("category__item")||r.classList.contains("category__item-name")){var i=r.getAttribute("data-category")||r.innerHTML;return console.log("category:"+i),document.querySelector(".sources").innerHTML="",void("all"===i?n.prototype.getResp.call(this,{endpoint:"sources"},t):n.prototype.getResp.call(this,{endpoint:"sources",options:{category:i}},t))}},e.prototype.getNews=function(e,t){for(var r=e.target,o=e.currentTarget;r!==o;){if(r.classList.contains("source__item")){var i=r.getAttribute("data-source-id");return void(o.getAttribute("data-source")!==i&&(o.setAttribute("data-source",i),n.prototype.getResp.call(this,{endpoint:"everything",options:{sources:i}},t)))}r=r.parentNode}},e.prototype.chooseFirstCategory=function(e){var t=document.querySelector(".sources"),r=document.querySelector(".source__item").getAttribute("data-source-id");t.getAttribute("data-source")!==r&&(t.setAttribute("data-source",r),n.prototype.getResp.call(this,{endpoint:"everything",options:{sources:r}},e))},e}(a),w=function(){function n(){this.controller=new C,this.view=new g}return n.prototype.start=function(){var n=this;document.querySelector(".sources").addEventListener("click",(function(e){return n.controller.getNews(e,(function(e){return n.view.drawNews(e)}))})),document.querySelector(".categories").addEventListener("click",(function(e){n.controller.getSourcesByCategory(e,(function(e){n.view.drawSources(e)}))})),this.view.drawCategories(),this.controller.getSources((function(e){n.view.drawSources(e),n.controller.chooseFirstCategory((function(e){return n.view.drawNews(e)}))}))},n}();var h=t(767);s()(h.Z,{insert:"head",singleton:!1}),h.Z.locals,(new w).start()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,